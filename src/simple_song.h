#ifndef SIMPLE_SONG
#define SIMPLE_SONG
#include <Sound.h>
#include <stdint.h>
#include <stdint.h>
#include <maybe_progmem.h>

#define LENGTH (1 << OSC_SIZE)
#define AMP 127
#define OFFSET 128
#define PI2 6.283185
#define CLOCK_DIVIDER 4
#define SAMPLE_RATE (16000000 / (256 * (CLOCK_DIVIDER + 1)))

const float invSampleRate = 1.0 / SAMPLE_RATE;

#define MELODY_SIZE 128
#define MELODY2_SIZE 5

const uint8_t PROGMEM prog_sin[] = { 127, 127, 128, 129, 130, 130, 131, 132, 133, 134, 134, 135, 136, 137, 137, 138, 139, 140, 140, 141, 142, 143, 144, 144, 145, 146, 147, 147, 148, 149, 150, 151, 151, 152, 153, 154, 154, 155, 156, 157, 157, 158, 159, 160, 160, 161, 162, 163, 163, 164, 165, 166, 166, 167, 168, 169, 169, 170, 171, 171, 172, 173, 174, 174, 175, 176, 177, 177, 178, 179, 179, 180, 181, 182, 182, 183, 184, 184, 185, 186, 186, 187, 188, 188, 189, 190, 190, 191, 192, 192, 193, 194, 194, 195, 196, 196, 197, 198, 198, 199, 200, 200, 201, 202, 202, 203, 203, 204, 205, 205, 206, 206, 207, 208, 208, 209, 209, 210, 211, 211, 212, 212, 213, 214, 214, 215, 215, 216, 216, 217, 217, 218, 218, 219, 220, 220, 221, 221, 222, 222, 223, 223, 224, 224, 225, 225, 226, 226, 227, 227, 228, 228, 229, 229, 229, 230, 230, 231, 231, 232, 232, 233, 233, 233, 234, 234, 235, 235, 235, 236, 236, 237, 237, 237, 238, 238, 239, 239, 239, 240, 240, 240, 241, 241, 241, 242, 242, 242, 243, 243, 243, 244, 244, 244, 244, 245, 245, 245, 246, 246, 246, 246, 247, 247, 247, 247, 248, 248, 248, 248, 248, 249, 249, 249, 249, 250, 250, 250, 250, 250, 250, 251, 251, 251, 251, 251, 251, 251, 252, 252, 252, 252, 252, 252, 252, 252, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 252, 252, 252, 252, 252, 252, 252, 252, 251, 251, 251, 251, 251, 251, 251, 250, 250, 250, 250, 250, 250, 249, 249, 249, 249, 248, 248, 248, 248, 248, 247, 247, 247, 247, 246, 246, 246, 246, 245, 245, 245, 244, 244, 244, 244, 243, 243, 243, 242, 242, 242, 241, 241, 241, 240, 240, 240, 239, 239, 239, 238, 238, 237, 237, 237, 236, 236, 235, 235, 235, 234, 234, 233, 233, 233, 232, 232, 231, 231, 230, 230, 229, 229, 229, 228, 228, 227, 227, 226, 226, 225, 225, 224, 224, 223, 223, 222, 222, 221, 221, 220, 220, 219, 218, 218, 217, 217, 216, 216, 215, 215, 214, 214, 213, 212, 212, 211, 211, 210, 209, 209, 208, 208, 207, 206, 206, 205, 205, 204, 203, 203, 202, 202, 201, 200, 200, 199, 198, 198, 197, 196, 196, 195, 194, 194, 193, 192, 192, 191, 190, 190, 189, 188, 188, 187, 186, 186, 185, 184, 184, 183, 182, 182, 181, 180, 179, 179, 178, 177, 177, 176, 175, 174, 174, 173, 172, 171, 171, 170, 169, 169, 168, 167, 166, 166, 165, 164, 163, 163, 162, 161, 160, 160, 159, 158, 157, 157, 156, 155, 154, 154, 153, 152, 151, 151, 150, 149, 148, 147, 147, 146, 145, 144, 144, 143, 142, 141, 140, 140, 139, 138, 137, 137, 136, 135, 134, 134, 133, 132, 131, 130, 130, 129, 128, 127, 127, 126, 125, 124, 123, 123, 122, 121, 120, 119, 119, 118, 117, 116, 116, 115, 114, 113, 113, 112, 111, 110, 109, 109, 108, 107, 106, 106, 105, 104, 103, 102, 102, 101, 100, 99, 99, 98, 97, 96, 96, 95, 94, 93, 93, 92, 91, 90, 90, 89, 88, 87, 87, 86, 85, 84, 84, 83, 82, 82, 81, 80, 79, 79, 78, 77, 76, 76, 75, 74, 74, 73, 72, 71, 71, 70, 69, 69, 68, 67, 67, 66, 65, 65, 64, 63, 63, 62, 61, 61, 60, 59, 59, 58, 57, 57, 56, 55, 55, 54, 53, 53, 52, 51, 51, 50, 50, 49, 48, 48, 47, 47, 46, 45, 45, 44, 44, 43, 42, 42, 41, 41, 40, 39, 39, 38, 38, 37, 37, 36, 36, 35, 35, 34, 33, 33, 32, 32, 31, 31, 30, 30, 29, 29, 28, 28, 27, 27, 26, 26, 25, 25, 24, 24, 24, 23, 23, 22, 22, 21, 21, 20, 20, 20, 19, 19, 18, 18, 18, 17, 17, 16, 16, 16, 15, 15, 14, 14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 41, 41, 42, 42, 43, 44, 44, 45, 45, 46, 47, 47, 48, 48, 49, 50, 50, 51, 51, 52, 53, 53, 54, 55, 55, 56, 57, 57, 58, 59, 59, 60, 61, 61, 62, 63, 63, 64, 65, 65, 66, 67, 67, 68, 69, 69, 70, 71, 71, 72, 73, 74, 74, 75, 76, 76, 77, 78, 79, 79, 80, 81, 82, 82, 83, 84, 84, 85, 86, 87, 87, 88, 89, 90, 90, 91, 92, 93, 93, 94, 95, 96, 96, 97, 98, 99, 99, 100, 101, 102, 102, 103, 104, 105, 106, 106, 107, 108, 109, 109, 110, 111, 112, 113, 113, 114, 115, 116, 116, 117, 118, 119, 119, 120, 121, 122, 123, 123, 124, 125, 126 };
const uint8_t PROGMEM prog_rand[] = { 191, 20, 214, 126, 45, 220, 142, 102, 131, 239, 87, 73, 97, 255, 105, 143, 97, 205, 209, 30, 157, 156, 22, 114, 114, 230, 29, 240, 132, 79, 74, 119, 2, 215, 232, 57, 44, 83, 203, 201, 18, 30, 51, 116, 158, 12, 244, 213, 212, 159, 212, 164, 89, 126, 53, 207, 50, 34, 244, 204, 207, 211, 144, 45, 72, 211, 143, 117, 230, 217, 29, 42, 229, 192, 247, 43, 120, 129, 135, 68, 14, 95, 80, 0, 212, 97, 141, 190, 123, 5, 21, 7, 59, 51, 130, 31, 24, 112, 146, 218, 100, 84, 206, 177, 133, 62, 105, 21, 248, 70, 106, 4, 150, 115, 14, 217, 22, 47, 103, 104, 212, 247, 74, 74, 208, 87, 104, 118, 250, 22, 187, 17, 173, 174, 36, 136, 121, 254, 82, 219, 37, 67, 229, 60, 244, 69, 211, 216, 40, 206, 11, 245, 197, 96, 89, 61, 151, 39, 138, 89, 118, 45, 208, 194, 201, 205, 104, 212, 73, 106, 121, 37, 8, 97, 64, 20, 177, 59, 106, 165, 17, 40, 193, 140, 214, 169, 11, 135, 151, 140, 47, 241, 21, 29, 154, 149, 193, 155, 225, 192, 126, 233, 168, 154, 167, 134, 194, 181, 84, 191, 154, 231, 217, 35, 209, 85, 144, 56, 40, 209, 217, 108, 161, 102, 94, 78, 225, 48, 156, 254, 217, 113, 159, 226, 165, 226, 12, 155, 180, 71, 101, 56, 42, 70, 137, 169, 130, 121, 122, 118, 120, 194, 99, 177, 38, 223, 218, 41, 109, 62, 98, 224, 150, 18, 52, 191, 57, 166, 63, 137, 94, 241, 109, 14, 227, 108, 40, 161, 30, 32, 29, 203, 194, 3, 63, 65, 7, 132, 15, 20, 5, 101, 27, 40, 97, 201, 197, 231, 44, 142, 70, 54, 8, 220, 243, 168, 141, 254, 190, 242, 235, 113, 255, 160, 208, 59, 117, 6, 140, 126, 135, 120, 115, 77, 208, 190, 130, 190, 219, 194, 70, 65, 43, 140, 250, 48, 127, 112, 240, 167, 84, 134, 50, 149, 170, 91, 104, 19, 11, 230, 252, 245, 202, 190, 125, 159, 137, 138, 65, 27, 253, 184, 79, 104, 246, 114, 123, 20, 153, 205, 211, 13, 240, 68, 58, 180, 166, 102, 83, 51, 11, 203, 161, 16, 94, 76, 236, 3, 76, 115, 230, 5, 180, 49, 14, 170, 173, 207, 213, 176, 202, 39, 255, 216, 157, 20, 77, 244, 121, 39, 89, 66, 124, 156, 193, 248, 205, 140, 135, 32, 35, 100, 184, 166, 135, 149, 76, 176, 90, 141, 78, 45, 153, 231, 61, 177, 96, 222, 177, 128, 173, 8, 65, 233, 103, 65, 165, 213, 159, 228, 24, 159, 21, 66, 0, 38, 254, 76, 209, 33, 4, 147, 47, 179, 143, 115, 83, 64, 67, 138, 175, 126, 202, 111, 213, 207, 211, 161, 149, 206, 90, 190, 101, 39, 42, 246, 7, 173, 161, 190, 101, 166, 180, 201, 192, 105, 50, 52, 9, 44, 77, 1, 143, 23, 86, 198, 219, 157, 200, 166, 216, 11, 136, 129, 56, 97, 107, 104, 18, 98, 249, 84, 208, 231, 113, 23, 72, 120, 13, 146, 41, 29, 134, 41, 153, 114, 219, 116, 28, 250, 79, 55, 184, 181, 176, 149, 87, 245, 223, 128, 108, 109, 141, 116, 217, 139, 67, 101, 17, 8, 165, 246, 121, 189, 247, 235, 21, 184, 224, 225, 96, 143, 110, 60, 123, 244, 91, 98, 138, 138, 143, 39, 92, 247, 229, 135, 74, 59, 50, 155, 97, 64, 132, 198, 195, 177, 167, 48, 74, 16, 238, 117, 111, 3, 47, 158, 106, 239, 16, 80, 155, 200, 129, 67, 41, 40, 138, 246, 233, 158, 71, 161, 129, 72, 49, 108, 205, 164, 158, 222, 129, 163, 140, 152, 16, 255, 154, 67, 205, 207, 87, 199, 80, 89, 191, 189, 28, 39, 3, 40, 127, 93, 137, 95, 185, 73, 52, 78, 96, 60, 229, 222, 2, 152, 66, 178, 13, 43, 182, 20, 236, 187, 184, 47, 115, 226, 81, 126, 125, 29, 216, 132, 211, 31, 1, 190, 80, 107, 22, 214, 67, 33, 131, 25, 21, 24, 152, 43, 44, 46, 139, 249, 14, 220, 188, 240, 202, 14, 61, 109, 148, 49, 146, 116, 175, 141, 181, 164, 144, 213, 94, 106, 64, 252, 128, 118, 2, 75, 23, 107, 54, 177, 33, 219, 125, 90, 234, 114, 30, 130, 141, 113, 168, 140, 184, 94, 217, 78, 175, 250, 191, 176, 148, 116, 29, 117, 229, 220, 16, 88, 70, 218, 242, 91, 129, 160, 127, 92, 203, 29, 54, 233, 73, 116, 2, 85, 210, 172, 26, 11, 247, 169, 38, 35, 64, 91, 163, 51, 185, 53, 136, 104, 173, 225, 42, 213, 178, 50, 93, 10, 229, 90, 220, 233, 119, 93, 235, 181, 105, 197, 58, 108, 147, 152, 13, 87, 235, 135, 154, 223, 4, 104, 178, 162, 213, 230, 164, 198, 188, 119, 95, 141, 195, 143, 214, 42, 33, 20, 169, 212, 4, 17, 1, 24, 141, 174, 187, 115, 28, 96, 202, 32, 207, 93, 214, 47, 69, 83, 41, 215, 168, 89, 204, 13, 234, 38, 237, 85, 78, 128, 132, 217, 43, 248, 55, 184, 237, 213, 122, 160, 92, 78, 250, 159, 33, 252, 60, 54, 133, 142, 129, 176, 125, 191, 238, 177, 228, 133, 233, 18, 7, 139, 198, 236, 102, 226, 163, 243, 185, 244, 144, 6, 50, 185, 244, 4, 2, 45, 44, 224, 30, 1, 116, 248, 67, 144, 11, 162, 55, 22, 146, 8, 83, 28, 181, 55, 62, 55, 14, 114, 251, 242, 70, 204, 38, 9, 126, 246, 122, 216, 237, 85, 151, 18, 202, 87, 2, 182, 108, 8, 110, 63, 176, 224, 58, 28, 155, 223, 58, 95, 64, 221, 186, 185, 228, 27, 192, 166, 97, 29, 146, 229, 200, 188, 120, 43, 74, 119, 195, 24, 89, 10, 14, 106, 10, 66, 196, 113, 190, 15, 227, 195, 1, 219, 255, 48, 178, 26, 137, 248, 101, 34, 81, 60, 5, 61, 74, 179, 190, 253, 141, 158, 25, 208 };
const float PROGMEM prog_jingle_bells[] = { 660.000000, 1109.983276, 988.882690, 880.994324, 660.000000, 0.000000, 0.000000, 660.000000, 660.000000, 1109.983276, 988.882690, 880.994324, 740.824951, 0.000000, 0.000000, 0.000000, 740.824951, 1175.986328, 1109.983276, 988.882690, 831.547913, 0.000000, 0.000000, 831.547913, 1320.000000, 1320.000000, 1175.986328, 988.882690, 1109.983276, 0.000000, 0.000000, 0.000000, 660.000000, 1109.983276, 988.882690, 880.994324, 660.000000, 0.000000, 0.000000, 660.000000, 660.000000, 1109.983276, 988.882690, 880.994324, 740.824951, 0.000000, 0.000000, 0.000000, 740.824951, 1175.986328, 1109.983276, 988.882690, 1320.000000, 1320.000000, 1320.000000, 1320.000000, 1481.649902, 1320.000000, 1175.986328, 988.882690, 880.994324, 0.000000, 1320.000000, 0.000000, 1109.983276, 1109.983276, 1109.983276, 0.000000, 1109.983276, 1109.983276, 1109.983276, 0.000000, 1109.983276, 1320.000000, 880.994324, 988.882690, 1109.983276, 0.000000, 0.000000, 0.000000, 1175.986328, 1175.986328, 1175.986328, 1175.986328, 1175.986328, 1109.983276, 1109.983276, 1109.983276, 1109.983276, 988.882690, 988.882690, 1109.983276, 988.882690, 0.000000, 1320.000000, 660.000000, 1109.983276, 1109.983276, 1109.983276, 0.000000, 1109.983276, 1109.983276, 1109.983276, 0.000000, 1109.983276, 1320.000000, 880.994324, 988.882690, 1109.983276, 0.000000, 0.000000, 0.000000, 1175.986328, 1175.986328, 1175.986328, 1175.986328, 1175.986328, 1109.983276, 1109.983276, 1109.983276, 1320.000000, 1320.000000, 1175.986328, 988.882690, 880.994324, 0.000000, 0.000000, 0.000000,  };

const PROGMEM int8_t melody[] = { 
    //0, 5, 4, 1, 8, 7, 10, 5, 8, 4, 5
    0, 9, 7, 5, 0, -1, -1, 0, 
    0, 9, 7, 5, 2, -1, -1, -1, 
    2, 10, 9, 7, 4, -1, -1, 4, 
    12, 12, 10, 7, 9, -1 , -1, -1,
    0, 9, 7, 5, 0, -1, -1, 0, 
    0, 9, 7, 5, 2, -1, -1, -1, 
    2, 10, 9, 7, 12, 12, 12, 12, 
    14, 12, 10, 7, 5, -1 , 12, -1,

    9, 9, 9, -1, 9, 9, 9, -1,
    9, 12, 5, 7, 9, -1, -1, -1,
    10, 10, 10, 10, 10, 9, 9, 9,
    9, 7, 7, 9, 7, -1, 12, 0,

    9, 9, 9, -1, 9, 9, 9, -1,
    9, 12, 5, 7, 9, -1, -1, -1,
    10, 10, 10, 10, 10, 9, 9, 9,
    12, 12, 10, 7, 5, -1, -1, -1
};

struct SongData {
    int stepCounter;

    OscValues synthOsc;
    OscValues synthOsc2;
    OscValues snareOsc;
    OscValues bassOsc;

    ReleaseEnvelope<4> relOp;
    ReleaseEnvelope<3> relSnare;
    ReleaseEnvelope<3> relBass;
    ReleaseEnvelope<3> relBassFreq;

    ProgmemFloatSequencer melody1Sequencer;
    
    StepSequencer<uint8_t> snareSeq;
    StepSequencer<uint8_t> bassSeq;

    uint8_t snareSteps[8] = {
        0, 0, 0, 0, 255, 0, 0, 255
    };

    uint8_t bassSteps[8] = {
        255, 0, 0, 255, 0, 0, 255, 0
    };

    float FM;
};


#define BPM 240
#define BPS 4

void setup_song(SongData*);
uint8_t step(SongData*);
#endif